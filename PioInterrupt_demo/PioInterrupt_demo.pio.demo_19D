/*
 This is IRQ_demo_19A.  This will blink the LED on and off once and then
 for interrupt 0 to be cleared by a handler; Life With David Ep 19 Demo A
*/
.program pioIRQ


// turn on the LED and delay, taking 1000 cycles
start:
    set pins, 1             ; turn on led
	set x,   31     [6]     ; put number of loop iterations into x scratch register; delay 6 cycles
delay_high:
	nop				[29]    ; no op for 30 clock cycles
    jmp pin irq_stall       ; monitor jpin; raise irq and wait for it to be cleared when jpin button pushed
	jmp x-- delay_high      ; loop until x is decremented from 31 to 0
// turn off the LED and delay, taking 1000 cycles (exactly like above)
    set pins, 0
	set x,   31     [6]
delay_low:
	nop				[29]
    jmp pin irq_stall
	jmp x-- delay_low
  jmp start                 ; wasn't used in demo 19ABC
// (instead, set interrupt and stall)
irq_stall:
	nop              [29]   ; no op - used for switch debounce in another demo
	irq wait 7              ; set a "wait" interrupt - stall pio program until irq is cleared
//	irq wait 3 rel          ; set a rel mode "wait" interrupt - stall pio program until irq is cleared
//	push block  // must be for other demo
    jmp start



% c-sdk {
#include "hardware/clocks.h"
//static inline void pioIRQ_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {  // demo 19ABC
static inline void pioIRQ_program_init(PIO pio, uint sm, uint offset, uint pin, uint jpin, float freq) {
    pio_sm_config c = pioIRQ_program_get_default_config(offset);

    // Map the state machine's SET pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_set_pins(&c, pin, 1);

    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);

    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

        // Set the jump pin for the state machine
        sm_config_set_jmp_pin (&c, jpin);

	// set the state machine clock rate
	float div = clock_get_hz(clk_sys) / freq ;  // calculates the clock divider
	sm_config_set_clkdiv(&c, div);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);

    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}
