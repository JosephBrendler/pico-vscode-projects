.program hsync

.wrap_target
    NOP

wait_high:              // wait while the pin is high, for it to go low
//    wait pin 0

wait_low:               // wait while the pin is low, for it to go high (trigger irq on rising edge)
//    wait pin 1
    NOP
    jmp pin irq_stall   // if pin has gone high, set irq
    jmp wait_low

irq_stall:
    irq wait 0          // set sm irq0 and wait for it to be cleared

.wrap

% c-sdk {
#include "hardware/clocks.h"
static inline void hsync_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {

    pio_sm_config c = hsync_program_get_default_config(offset);

    // Map the state machine's SET pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_set_pins(&c, pin, 1);

    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);

    // Set the pin direction to input according to -
    // int pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);

    // set the state machine clock rate
    float div = clock_get_hz(clk_sys) / freq ;  // calculates the clock divider
    sm_config_set_clkdiv(&c, div);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);

    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}